Nextjs session 24th-Feb-2025

Git Url: https://github.com/aniljos/Nextjs-Feb-24-2025
REST API Mock: https://github.com/aniljos/REST-API-Mock

Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3

Introduction: https://forms.gle/JJUREb7AcNcX5TXv5
Quiz 1: https://forms.gle/FMLivhhbbNVF3xoN6
Quiz 2: https://forms.gle/jA3ieHJHngoBYXih9
Quiz 3: https://forms.gle/J1R9yEvVF8ALPted9

Project Files(nextjs)

1. package.json
		npm config file
		scripts and dependencies
2. node_modules folder
		all dependencies are installed
3. tsconfig.json
		typescript config6
4. eslint.config.mjs
		eslint config
5. next.config.js
		nextjs config file
		react configuration
		api configuration
6. public folder
		all resources that can be accessed publicly
		images/fonts/icons/css
7. src folder: optional folder for the source code
8. app folder: 
		folder for the App Router
		From nextjs 13 onwards
		Inline the new features of React 18, 19: RSC, Server Actions
9. pages folder: legacy
		folder for the Pages Router
		Till Nextjs 13: Client componenet, SSR(Nextjs specific feature)
10. layout.tsx
		Its a server component
		Defines the app layout
		Like the entry point
11. page.tsx
		Page to be rendered on the home route(http://localhost:3000)

Components
	- functional 
	- class (deprecated from React 19)
	
	- client 
	- server( introduced in React 18)
		In Nextjs 13 the default is server component
		Cannot have any interactivity(no user actions)
		
component props
	- An object
	- Passing data from parent to child component or vice versa
	- props is read-only(in the child component)
	- <Message text="abc"/>  => props.text
	- <Message text="abc">
		<p>Hello</p>         => props.children
	  </Message>
	
component state

	- setState method - 2 overloads
		-setState(updatedValue)
		-setState(callback) = function callback(currentValue) ==> updatedValue
	- state updates are asynchronous
	- state updates are always batch
		count = 5
		setCount(count + 1);  ==> setCount(6) 
        setCount(count + 1);  ==> setCount(6)
		
		setCount(currentCount => currentCount + 1); => setCount(invoke the callback) => 5 => 6
        setCount(currentCount => currentCount + 1); => setCount(invoke the callback) => 6 => 7
	- state must be treated as immutable
		- create a copy, change the copy,and update the state with the copy
	
	
	
component render
	- props changes
	- state changes
	- parent componenet rerenders


	
React hooks
	- state, lifecycle hooks, context, reference
	
	
useEffect
   -method signature
		- useEffect(setup method, optional array of dependencies)
		- useEffect(() => {}, [])
   - mount
       - useEffect(() => {}, [empty array])
	   - Invoked after the first render
	   - Logic
			- API calls to fetch data from the backend
			- Register for any window/docuemnt events
			- DOM initializations
   - unmount
       - Logic
			- Cancel the API call
			- Unregister for any window/docuemnt events
			- Any cleanup
   - update
       - useEffect(() => {}, [with dependencies])
	   
	   
Design & Optimization
	- Components -reuseable and modular(smaller component)
		- easy maintain & testing
		- better for optimization
	Optimization	
		- React.memo
		- Hooks
			-useCallback
			-useMemo
		- Virtual DOM
	Design
		- HOC (Higher Order Component)- Wrapper on a  react component: 
				-Render Hijacking, Injecting props
				- Example: React.memo
			
		- Custom Hooks
			- function that uses other React hooks
			- Reuseablity amd modularity
		
Forms
	- controller input
			- reactive
			- state(useState hook) is bound to the form element(input/checkbox,select/radio/textarea)
			- binding: value attribute to set the value to the form field
			- binding: onChange event to get the value
	- uncontroller input
			- non-reactive
			- ref(useRef hook) is attached the form field
			- using the reference, get or set the value
			- similar to document.getElementById(#formfieldId)
	
HTTP Status Codes
	100 - Information
	200(200, 201, 204) - Success
	300 - Redirect
	
	400(400, 401, 403, 404) - Client error
	500(500, 503) - Server error
	
EditProductPage(Assignment)

	- fetch the product based on the id(product id) : GET http://localhost:9000/products/{id}
	- populate the form fields with the values => controlled inputs
	- on save btn: 
			- save to the server: PUT http://localhost:9000/products/4 and post the data
				- success: navigate back to /products
				- failed: show an error message
	- on cancel
		navigate back to /products
	- hint(the state will have a product(immutable))
	
State Management
	- localStorage(persistant)
	- sessionStorage( non-persistant) -only for sessionStorage
	
	- Memory
		- react context or redux
		
		
	
	
	
Redux
    - install
		-redux, react-redux, @reduxjs/toolkit
		- npm install @reduxjs/toolkit react-redux
	- action
		- its as object with a type property
		- {type: "save_token", token:"asdasdada"}
		- {type: clear_token}
	-Reducer
		- A function
		- Receives and process the actions and update the store
		- Must be synchronous
		- State must be treated as immutable
	- Store
	
	- Middleware
	    - intercepts the action for any preprocessing before the reducer acts on its
		- logging, validations, async operations
		- Async middleware library: Redux Thunk, Redux Saga
	
	- Redux Toolkit
		- Action creators- helper methods to simplfy the creation of actions
		- Slices: 
			- In slices state is mutable
			- Generate the reducer and the  actions creators
	- Redux persist
		- To persist across sessions(local storage)
		

react-redux
	- Provider component - allows to integrate Redux with the react application
	- Hooks	
		- useDispatch: returns a dispatch function(dispatch an action)
		- useSelector: fetch data from the store(select)
		- useStore: returns a handle to the store
		
React Context
	- Sharing data between components
	- Low-level API
	- Multiple contexts(store)
	- Hook 
		-useContext: fetch the context data.
		
		- useReducer
		
Assignments
	- Implement the Gadget Store and Viewcart using React Context
			-Using the useReducer hook
			
			
SSG & SSR(react server components)

	- The default is SSG
	- API call to static endpoints - SSG
	- The Component receives props - SSR
	- The API call to a non-static endpoint - SSR
	- The API call(using fetch) has {cache: "no-cache"} - SSR
	- Use any dynamic apis(headers, cookies) - SSR
	- Force SSR - export const dynamic = 'force-dynamic' -- SSR
	
Backend API
	- Any language or framework(spring, .net etc)
    = JavaScript(Node.js)
		- Http Module
		- Express Framework
		
		- Next.js API 
		
		
		
		
Tutorials: https://www.youtube.com/@DaveGrayTeachesCode

LinkedIn Profile: https://www.linkedin.com/in/anil-joseph-consultant/
	
				
		

	


